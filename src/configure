#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

config = converge( Hooky::Elasticsearch::CONFIG_DEFAULTS, payload[:config] || {} )

if payload[:platform] != 'local'
  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ed25519_key' }
  end
end

# make sure the env dir exists
directory "/data/etc/env.d" do
  recursive true
end

# and that it's owned by gonano
execute "chown gonano /data/etc/env.d"

(payload[:env] || {}).each do |key, value|
  file "/data/etc/env.d/#{key}" do
    content value
    owner 'gonano'
    group 'gonano'
    mode 0444
  end
end

if ['default', 'primary', 'secondary'].include? payload[:member][:role]
  directory '/data/var/db/elasticsearch' do
    recursive true
    owner 'gonano'
    group 'gonano'
  end

  directory '/data/var/log' do
    recursive true
    owner 'gonano'
    group 'gonano'
  end

  if payload[:platform] == 'local'
    maxmemory = 128
    appname   = 'nanobox'
  else
    total_mem = `vmstat -s | grep 'total memory' | awk '{print $1}'`.to_i
    cgroup_mem = `cat /sys/fs/cgroup/memory/memory.limit_in_bytes`.to_i
    # Don't go above 80,000 MiB, because somewhere around 32 GiB is when the JVM
    # switches from "compressed OOPs" to regular ones, which consume twice the
    # space in RAM, and negatively impact performance. 80,000 * 0.4 == 32,000,
    # which is safe.
    # [https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html]
    # We also don't want to go below 128 MiB, or ES will fail to start at all.
    # The start hook will verify whether this amount of RAM is available before
    # actually starting the service, so we can safely set it to that size here
    # in the configuration hook.
    maxmemory = [ [ total_mem / 1024, cgroup_mem / 1024 / 1024, 32000 ].min, 128 ].max
    appname   = 'nanobox'
  end

  # chown data/var/db/cassandra for gonano
  execute 'chown /data/var' do
    command 'chown -R gonano:gonano /data/var'
  end

  directory '/data/etc/elasticsearch' do
    recursive true
    owner 'gonano'
    group 'gonano'
  end

  # Configure elasticsearch
  template '/data/etc/elasticsearch/elasticsearch.yml' do
    mode 0755
    source 'elasticsearch.yml.erb'
    variables ({ config: config, node_name: "#{payload[:component][:uid]}-#{payload[:member][:uid]}" })
  end

  template '/data/etc/elasticsearch/jvm.options' do
    mode 0755
    source 'jvm.options.erb'
    variables ({ config: config, maxmemory: maxmemory })
  end

  template '/data/etc/elasticsearch/log4j2.properties' do
    mode 0755
    source 'log4j2.properties.erb'
    variables ({ config: config })
  end

  if payload[:logvac_host]
    # Configure narc
    template '/opt/gonano/etc/narc.conf' do
      variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
    end
    # ensure log files are created
    ["/var/log/gonano/db/current"].each do |log_file|
      if not ::File.exists? "#{log_file}"
        parent = File.expand_path("..", "#{log_file}")

        # create the parent directory
        directory parent do
          owner 'gonano'
          group 'gonano'
          recursive true
        end

        # create the log_file
        file "#{log_file}" do
          owner 'gonano'
          group 'gonano'
          mode  0644
        end
      end
    end

    directory '/etc/service/narc'

    template '/etc/service/narc/run' do
      mode 0755
      source 'run-root.erb'
      variables ({ exec: "/opt/gonano/bin/narcd /opt/gonano/etc/narc.conf" })
    end
  end
end

# Install extra packages

# Add extra paths
if payload[:extra_path_dirs] && payload[:extra_path_dirs].length > 0
  directory "/data/etc/env.d" do
    recursive true
    owner 'gonano'
    group 'gonano'
  end

  file "/data/etc/env.d/EXTRA_PATHS" do
    content payload[:extra_path_dirs].join(":")
    owner 'gonano'
    group 'gonano'
    mode 0444
  end
end

if payload[:extra_packages]
  execute "Install packages" do
    command "/data/bin/pkgin -y in #{payload[:extra_packages].join(' ')}"
    path "/data/sbin:/data/bin:/opt/gonano/sbin:/opt/gonano/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    user 'gonano'
  end
end

if payload[:extra_steps]
  payload[:extra_steps].each_with_index do |cmd, i|

    execute "Extra Step: #{cmd}" do
      command "bash -i -l -c \"#{escape cmd}\""
      cwd "/data"
      path "/data/sbin:/data/bin:/opt/gonano/sbin:/opt/gonano/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      user 'gonano'
    end
  end
end

# Set up cron
if payload[:member][:uid] == 1 && ! payload[:cron_jobs].nil?
  include Hookit::Helper::Cron
  include Hookit::Helper::Shell

  directory '/opt/nanobox/cron/'

  payload[:cron_jobs].each_with_index do |job, id|
    template "/opt/nanobox/cron/#{job[:id]}" do
      owner 'gonano'
      source 'cron.erb'
      group 'gonano'
      mode 0755
      variables ({
        component_uid: payload[:component][:uid],
        member_uid: payload[:member][:uid],
        logvac_host: payload[:logvac_host],
        command: escape_shell_string(job[:command]),
        cron_id: id + 1
      })
    end
  end

  template '/etc/crontab' do
    mode 0644
    variables ({ crons: payload[:cron_jobs] })
  end

end
